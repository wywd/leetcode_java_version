class Solution {
    List<String> res = new ArrayList<>();
    //每次迭代获取一个字符串，所以会设计大量的字符串拼接，所以这里选择更为高效的 StringBuilder
    StringBuilder path = new StringBuilder();
    String[] numString = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    public List<String> letterCombinations(String digits) {
        if (digits == null || digits.length() == 0 ) return res;
        helper(digits, 0);
        return res;
    }

    void helper(String digits, int index) {
        //遍历全部一次记录一次得到的字符串
        if (index == digits.length()) {
            res.add(path.toString());
            return;
        }

        String str = numString[digits.charAt(index) - '0'];
        for (int i = 0; i < str.length(); i++) {
            path.append(str.charAt(i));
            helper(digits, index + 1);
            path.deleteCharAt(path.length() - 1);
        }
    }

}

//runtime:0 ms
//memory:37 MB
