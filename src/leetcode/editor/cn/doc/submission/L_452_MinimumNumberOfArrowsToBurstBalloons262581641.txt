class Solution {
    public int findMinArrowShots(int[][] points) {
        if (points.length == 1) {
            return 1;
        }
        Arrays.sort(points, (o1, o2) -> Integer.compare(o1[1], o2[1]));  // 按照高的位置来
        for (int i = 0; i < points.length; i++) {
            System.out.println(Arrays.toString(points[i]));
        }
        int sum = 1;  // 射箭的次数
        int x = points[0][1];  // 当前的射箭位置
        for (int i = 1; i < points.length; i++) {
            if (x < points[i][0]) {  // 射不到下一个气球
                sum++;
                x = points[i][1]; // 更新为下一个气球的最高点
            }
        }
        return sum;
    }
}

//runtime:448 ms
//memory:72.8 MB
